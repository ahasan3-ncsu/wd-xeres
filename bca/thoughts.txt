CODE flow

disseminator.py
- starts with a list of energies and radii
- creates a dict with E, Rb, n_ions, etc.
- calls gen_toml with the dict to make an input.toml
- creates paths with E, Rb values
- copies over the input.toml
- calls runner.py with the paths
- calls agg.py with the paths

input_gen.py (provides gen_toml)
- takes a dict and finds the main.toml using it
- creates a new input.toml and names it using dict values

runner.py
- creates run_i dirs in the given path
- (!) deduces input.toml name from the path
- copies over input.toml file in the path
- runs RustBCA
- runs xe_res.py and saves output to xe_res.output
- cleans up simulation files

agg.py
- finds run_i dirs using the given path
- reads run_i/xe_res.output
- writes in xe_res.json after calculation

Hardcoded things:
- 'filename': 'ballbox.toml' (disseminator)
- n_ions = 1000 (disseminator)
- full path is tied to input.toml name (runner)
- xe_res.ouput (runner)
- xe_res.json (agg)


FILE structure

toml:
original filename (positional argument)
Y - N, E, pos
I - N, E, pos
sphere - R, rho

headon (equil_pres)
- 64 nm (radius)
  - Y_1MeV (ion type and energy)
	- run_1
	  - xe_res.output
	- run_2
	- ...
	- aggregate data (xe_res.json)
  - I_5MeV
	- run_1
	- run_2
	- ...

xe_res.json file generated by agg.py:
- sim_runs
- xe_recoils
- xe_outside
- re-solved
